'use strict';
/**
 * Operator symbols to be used when querying data
 *
 * @see {@link Model#where}
 *
 * @property eq
 * @property ne
 * @property gte
 * @property gt
 * @property lte
 * @property lt
 * @property not
 * @property is
 * @property in
 * @property notIn
 * @property like
 * @property notLike
 * @property iLike
 * @property notILike
 * @property startsWith
 * @property endsWith
 * @property substring
 * @property regexp
 * @property notRegexp
 * @property iRegexp
 * @property notIRegexp
 * @property between
 * @property notBetween
 * @property overlap
 * @property contains
 * @property contained
 * @property adjacent
 * @property strictLeft
 * @property strictRight
 * @property noExtendRight
 * @property noExtendLeft
 * @property and
 * @property or
 * @property any
 * @property all
 * @property values
 * @property col
 * @property placeholder
 * @property join
 */

const Op = {
  eq: Symbol.for('eq'),
  ne: Symbol.for('ne'),
  gte: Symbol.for('gte'),
  gt: Symbol.for('gt'),
  lte: Symbol.for('lte'),
  lt: Symbol.for('lt'),
  not: Symbol.for('not'),
  is: Symbol.for('is'),
  in: Symbol.for('in'),
  notIn: Symbol.for('notIn'),
  like: Symbol.for('like'),
  notLike: Symbol.for('notLike'),
  iLike: Symbol.for('iLike'),
  notILike: Symbol.for('notILike'),
  startsWith: Symbol.for('startsWith'),
  endsWith: Symbol.for('endsWith'),
  substring: Symbol.for('substring'),
  regexp: Symbol.for('regexp'),
  notRegexp: Symbol.for('notRegexp'),
  iRegexp: Symbol.for('iRegexp'),
  notIRegexp: Symbol.for('notIRegexp'),
  between: Symbol.for('between'),
  notBetween: Symbol.for('notBetween'),
  overlap: Symbol.for('overlap'),
  contains: Symbol.for('contains'),
  contained: Symbol.for('contained'),
  adjacent: Symbol.for('adjacent'),
  strictLeft: Symbol.for('strictLeft'),
  strictRight: Symbol.for('strictRight'),
  noExtendRight: Symbol.for('noExtendRight'),
  noExtendLeft: Symbol.for('noExtendLeft'),
  and: Symbol.for('and'),
  or: Symbol.for('or'),
  any: Symbol.for('any'),
  all: Symbol.for('all'),
  values: Symbol.for('values'),
  col: Symbol.for('col'),
  placeholder: Symbol.for('placeholder'),
  join: Symbol.for('join')
};
module.exports = Op;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2xpYi9vcGVyYXRvcnMuanMiXSwibmFtZXMiOlsiT3AiLCJlcSIsIlN5bWJvbCIsImZvciIsIm5lIiwiZ3RlIiwiZ3QiLCJsdGUiLCJsdCIsIm5vdCIsImlzIiwiaW4iLCJub3RJbiIsImxpa2UiLCJub3RMaWtlIiwiaUxpa2UiLCJub3RJTGlrZSIsInN0YXJ0c1dpdGgiLCJlbmRzV2l0aCIsInN1YnN0cmluZyIsInJlZ2V4cCIsIm5vdFJlZ2V4cCIsImlSZWdleHAiLCJub3RJUmVnZXhwIiwiYmV0d2VlbiIsIm5vdEJldHdlZW4iLCJvdmVybGFwIiwiY29udGFpbnMiLCJjb250YWluZWQiLCJhZGphY2VudCIsInN0cmljdExlZnQiLCJzdHJpY3RSaWdodCIsIm5vRXh0ZW5kUmlnaHQiLCJub0V4dGVuZExlZnQiLCJhbmQiLCJvciIsImFueSIsImFsbCIsInZhbHVlcyIsImNvbCIsInBsYWNlaG9sZGVyIiwiam9pbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLE1BQU1BLEVBQUUsR0FBRztBQUNUQyxFQUFBQSxFQUFFLEVBQUVDLE1BQU0sQ0FBQ0MsR0FBUCxDQUFXLElBQVgsQ0FESztBQUVUQyxFQUFBQSxFQUFFLEVBQUVGLE1BQU0sQ0FBQ0MsR0FBUCxDQUFXLElBQVgsQ0FGSztBQUdURSxFQUFBQSxHQUFHLEVBQUVILE1BQU0sQ0FBQ0MsR0FBUCxDQUFXLEtBQVgsQ0FISTtBQUlURyxFQUFBQSxFQUFFLEVBQUVK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QUFNLEVBQUVwQyxNQUFNLENBQUNDLEdBQVAsQ0FBVyxRQUFYLENBcENDO0FBcUNUb0MsRUFBQUEsR0FBRyxFQUFFckMsTUFBTSxDQUFDQyxHQUFQLENBQVcsS0FBWCxDQXJDSTtBQXNDVHFDLEVBQUFBLFdBQVcsRUFBRXRDLE1BQU0sQ0FBQ0MsR0FBUCxDQUFXLGFBQVgsQ0F0Q0o7QUF1Q1RzQyxFQUFBQSxJQUFJLEVBQUV2QyxNQUFNLENBQUNDLEdBQVAsQ0FBVyxNQUFYO0FBdkNHLENBQVg7QUEwQ0F1QyxNQUFNLENBQUNDLE9BQVAsR0FBaUIzQyxFQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlxuJ3VzZSBzdHJpY3QnO1xuLyoqXG4gKiBPcGVyYXRvciBzeW1ib2xzIHRvIGJlIHVzZWQgd2hlbiBxdWVyeWluZyBkYXRhXG4gKlxuICogQHNlZSB7QGxpbmsgTW9kZWwjd2hlcmV9XG4gKlxuICogQHByb3BlcnR5IGVxXG4gKiBAcHJvcGVydHkgbmVcbiAqIEBwcm9wZXJ0eSBndGVcbiAqIEBwcm9wZXJ0eSBndFxuICogQHByb3BlcnR5IGx0ZVxuICogQHByb3BlcnR5IGx0XG4gKiBAcHJvcGVydHkgbm90XG4gKiBAcHJvcGVydHkgaXNcbiAqIEBwcm9wZXJ0eSBpblxuICogQHByb3BlcnR5IG5vdEluXG4gKiBAcHJvcGVydHkgbGlrZVxuICogQHByb3BlcnR5IG5vdExpa2VcbiAqIEBwcm9wZXJ0eSBpTGlrZVxuICogQHByb3BlcnR5IG5vdElMaWtlXG4gKiBAcHJvcGVydHkgc3RhcnRzV2l0aFxuICogQHByb3BlcnR5IGVuZHNXaXRoXG4gKiBAcHJvcGVydHkgc3Vic3RyaW5nXG4gKiBAcHJvcGVydHkgcmVnZXhwXG4gKiBAcHJvcGVydHkgbm90UmVnZXhwXG4gKiBAcHJvcGVydHkgaVJlZ2V4cFxuICogQHByb3BlcnR5IG5vdElSZWdleHBcbiAqIEBwcm9wZXJ0eSBiZXR3ZWVuXG4gKiBAcHJvcGVydHkgbm90QmV0d2VlblxuICogQHByb3BlcnR5IG92ZXJsYXBcbiAqIEBwcm9wZXJ0eSBjb250YWluc1xuICogQHByb3BlcnR5IGNvbnRhaW5lZFxuICogQHByb3BlcnR5IGFkamFjZW50XG4gKiBAcHJvcGVydHkgc3RyaWN0TGVmdFxuICogQHByb3BlcnR5IHN0cmljdFJpZ2h0XG4gKiBAcHJvcGVydHkgbm9FeHRlbmRSaWdodFxuICogQHByb3BlcnR5IG5vRXh0ZW5kTGVmdFxuICogQHByb3BlcnR5IGFuZFxuICogQHByb3BlcnR5IG9yXG4gKiBAcHJvcGVydHkgYW55XG4gKiBAcHJvcGVydHkgYWxsXG4gKiBAcHJvcGVydHkgdmFsdWVzXG4gKiBAcHJvcGVydHkgY29sXG4gKiBAcHJvcGVydHkgcGxhY2Vob2xkZXJcbiAqIEBwcm9wZXJ0eSBqb2luXG4gKi9cbmNvbnN0IE9wID0ge1xuICBlcTogU3ltYm9sLmZvcignZXEnKSxcbiAgbmU6IFN5bWJvbC5mb3IoJ25lJyksXG4gIGd0ZTogU3ltYm9sLmZvcignZ3RlJyksXG4gIGd0OiBTeW1ib2wuZm9yKCdndCcpLFxuICBsdGU6IFN5bWJvbC5mb3IoJ2x0ZScpLFxuICBsdDogU3ltYm9sLmZvcignbHQnKSxcbiAgbm90OiBTeW1ib2wuZm9yKCdub3QnKSxcbiAgaXM6IFN5bWJvbC5mb3IoJ2lzJyksXG4gIGluOiBTeW1ib2wuZm9yKCdpbicpLFxuICBub3RJbjogU3ltYm9sLmZvcignbm90SW4nKSxcbiAgbGlrZTogU3ltYm9sLmZvcignbGlrZScpLFxuICBub3RMaWtlOiBTeW1ib2wuZm9yKCdub3RMaWtlJyksXG4gIGlMaWtlOiBTeW1ib2wuZm9yKCdpTGlrZScpLFxuICBub3RJTGlrZTogU3ltYm9sLmZvcignbm90SUxpa2UnKSxcbiAgc3RhcnRzV2l0aDogU3ltYm9sLmZvcignc3RhcnRzV2l0aCcpLFxuICBlbmRzV2l0aDogU3ltYm9sLmZvcignZW5kc1dpdGgnKSxcbiAgc3Vic3RyaW5nOiBTeW1ib2wuZm9yKCdzdWJzdHJpbmcnKSxcbiAgcmVnZXhwOiBTeW1ib2wuZm9yKCdyZWdleHAnKSxcbiAgbm90UmVnZXhwOiBTeW1ib2wuZm9yKCdub3RSZWdleHAnKSxcbiAgaVJlZ2V4cDogU3ltYm9sLmZvcignaVJlZ2V4cCcpLFxuICBub3RJUmVnZXhwOiBTeW1ib2wuZm9yKCdub3RJUmVnZXhwJyksXG4gIGJldHdlZW46IFN5bWJvbC5mb3IoJ2JldHdlZW4nKSxcbiAgbm90QmV0d2VlbjogU3ltYm9sLmZvcignbm90QmV0d2VlbicpLFxuICBvdmVybGFwOiBTeW1ib2wuZm9yKCdvdmVybGFwJyksXG4gIGNvbnRhaW5zOiBTeW1ib2wuZm9yKCdjb250YWlucycpLFxuICBjb250YWluZWQ6IFN5bWJvbC5mb3IoJ2NvbnRhaW5lZCcpLFxuICBhZGphY2VudDogU3ltYm9sLmZvcignYWRqYWNlbnQnKSxcbiAgc3RyaWN0TGVmdDogU3ltYm9sLmZvcignc3RyaWN0TGVmdCcpLFxuICBzdHJpY3RSaWdodDogU3ltYm9sLmZvcignc3RyaWN0UmlnaHQnKSxcbiAgbm9FeHRlbmRSaWdodDogU3ltYm9sLmZvcignbm9FeHRlbmRSaWdodCcpLFxuICBub0V4dGVuZExlZnQ6IFN5bWJvbC5mb3IoJ25vRXh0ZW5kTGVmdCcpLFxuICBhbmQ6IFN5bWJvbC5mb3IoJ2FuZCcpLFxuICBvcjogU3ltYm9sLmZvcignb3InKSxcbiAgYW55OiBTeW1ib2wuZm9yKCdhbnknKSxcbiAgYWxsOiBTeW1ib2wuZm9yKCdhbGwnKSxcbiAgdmFsdWVzOiBTeW1ib2wuZm9yKCd2YWx1ZXMnKSxcbiAgY29sOiBTeW1ib2wuZm9yKCdjb2wnKSxcbiAgcGxhY2Vob2xkZXI6IFN5bWJvbC5mb3IoJ3BsYWNlaG9sZGVyJyksXG4gIGpvaW46IFN5bWJvbC5mb3IoJ2pvaW4nKVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPcDtcbiJdfQ==