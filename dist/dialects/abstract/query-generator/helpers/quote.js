/**
 * Quote helpers implement quote ability for all dialects.
 * These are basic block of query building
 *
 * Its better to implement all dialect implementation together here. Which will allow
 * even abstract generator to use them by just specifying dialect type.
 *
 * Defining these helpers in each query dialect will leave
 * code in dual dependency of abstract <-> specific dialect
 */
'use strict';

const Utils = require('../../../../utils');
/**
 * list of reserved words in PostgreSQL 10
 * source: https://www.postgresql.org/docs/10/static/sql-keywords-appendix.html
 *
 * @private
 */


const postgresReservedWords = 'all,analyse,analyze,and,any,array,as,asc,asymmetric,authorization,binary,both,case,cast,check,collate,collation,column,concurrently,constraint,create,cross,current_catalog,current_date,current_role,current_schema,current_time,current_timestamp,current_user,default,deferrable,desc,distinct,do,else,end,except,false,fetch,for,foreign,freeze,from,full,grant,group,having,ilike,in,initially,inner,intersect,into,is,isnull,join,lateral,leading,left,like,limit,localtime,localtimestamp,natural,not,notnull,null,offset,on,only,or,order,outer,overlaps,placing,primary,references,returning,right,select,session_user,similar,some,symmetric,table,tablesample,then,to,trailing,true,union,unique,user,using,variadic,verbose,when,where,window,with'.split(',');
/**
 *
 * @param {string}  dialect         Dialect name
 * @param {string}  identifier      Identifier to quote
 * @param {Object}  [options]
 * @param {boolean} [options.force=false]
 * @param {boolean} [options.quoteIdentifiers=true]
 *
 * @returns {string}
 * @private
 */

function quoteIdentifier(dialect, identifier, options) {
  if (identifier === '*') return identifier;
  options = Utils.defaults(options || {}, {
    force: false,
    quoteIdentifiers: true
  });

  switch (dialect) {
    case 'sqlite':
    case 'mariadb':
    case 'mysql':
      return Utils.addTicks(Utils.removeTicks(identifier, '`'), '`');

    case 'postgres':
      const rawIdentifier = Utils.removeTicks(identifier, '"');

      if (options.force !== true && options.quoteIdentifiers === false && !identifier.includes('.') && !identifier.includes('->') && !postgresReservedWords.includes(rawIdentifier.toLowerCase())) {
        // In Postgres, if tables or attributes are created double-quoted,
        // they are also case sensitive. If they contain any uppercase
        // characters, they must always be double-quoted. This makes it
        // impossible to write queries in portable SQL if tables are created in
        // this way. Hence, we strip quotes if we don't want case sensitivity.
        return rawIdentifier;
      }

      return Utils.addTicks(rawIdentifier, '"');

    case 'mssql':
      return `[${identifier.replace(/[[\]']+/g, '')}]`;

    default:
      throw new Error(`Dialect "${dialect}" is not supported`);
  }
}

module.exports.quoteIdentifier = quoteIdentifier;
/**
 * Test if a give string is already quoted
 *
 * @param {string} identifier
 *
 * @returns {boolean}
 * @private
 */

function isIdentifierQuoted(identifier) {
  return /^\s*(?:([`"'])(?:(?!\1).|\1{2})*\1\.?)+\s*$/i.test(identifier);
}

module.exports.isIdentifierQuoted = isIdentifierQuoted;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYi9kaWFsZWN0cy9hYnN0cmFjdC9xdWVyeS1nZW5lcmF0b3IvaGVscGVycy9xdW90ZS5qcyJdLCJuYW1lcyI6WyJVdGlscyIsInJlcXVpcmUiLCJwb3N0Z3Jlc1Jlc2VydmVkV29yZHMiLCJzcGxpdCIsInF1b3RlSWRlbnRpZmllciIsImRpYWxlY3QiLCJpZGVudGlmaWVyIiwib3B0aW9ucyIsImRlZmF1bHRzIiwiZm9yY2UiLCJxdW90ZUlkZW50aWZpZXJzIiwiYWRkVGlja3MiLCJyZW1vdmVUaWNrcyIsInJhd0lkZW50aWZpZXIiLCJpbmNsdWRlcyIsInRvTG93ZXJDYXNlIiwicmVwbGFjZSIsIkVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyIsImlzSWRlbnRpZmllclF1b3RlZCIsInRlc3QiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUEsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsbUJBQUQsQ0FBckI7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLE1BQU1DLHFCQUFxQixHQUFHLGl1QkFBaXVCQyxLQUFqdUIsQ0FBdXVCLEdBQXZ1QixDQUE5QjtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsU0FBU0MsZUFBVCxDQUF5QkMsT0FBekIsRUFBa0NDLFVBQWxDLEVBQThDQyxPQUE5QyxFQUF1RDtBQUNyRCxNQUFJRCxVQUFVLEtBQUssR0FBbkIsRUFBd0IsT0FBT0EsVUFBUDtBQUV4QkMsRUFBQUEsT0FBTyxHQUFHUCxLQUFLLENBQUNRLFFBQU4sQ0FBZUQsT0FBTyxJQUFJLEVBQTFCLEVBQThCO0FBQ3RDRSxJQUFBQSxLQUFLLEVBQUUsS0FEK0I7QUFFdENDLElBQUFBLGdCQUFnQixFQUFFO0FBRm9CLEdBQTlCLENBQVY7O0FBS0EsVUFBUUwsT0FBUjtBQUNFLFNBQUssUUFBTDtBQUNBLFNBQUssU0FBTDtBQUNBLFNBQUssT0FBTDtBQUNFLGFBQU9MLEtBQUssQ0FBQ1csUUFBTixDQUFlWCxLQUFLLENBQUNZLFdBQU4sQ0FBa0JOLFVBQWxCLEVBQThCLEdBQTlCLENBQWYsRUFBbUQsR0FBbkQsQ0FBUDs7QUFFRixTQUFLLFVBQUw7QUFDRSxZQUFNTyxhQUFhLEdBQUdiLEtBQUssQ0FBQ1ksV0FBTixDQUFrQk4sVUFBbEIsRUFBOEIsR0FBOUIsQ0FBdEI7O0FBRUEsVUFDRUMsT0FBTyxDQUFDRSxLQUFSLEtBQWtCLElBQWxCLElBQ0FGLE9BQU8sQ0FBQ0csZ0JBQVIsS0FBNkIsS0FEN0IsSUFFQSxDQUFDSixVQUFVLENBQUNRLFFBQVgsQ0FBb0IsR0FBcEIsQ0FGRCxJQUdBLENBQUNSLFVBQVUsQ0FBQ1EsUUFBWCxDQUFvQixJQUFwQixDQUhELElBSUEsQ0FBQ1oscUJBQXFCLENBQUNZLFFBQXRCLENBQStCRCxhQUFhLENBQUNFLFdBQWQsRUFBL0IsQ0FMSCxFQU1FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQU9GLGFBQVA7QUFDRDs7QUFDRCxhQUFPYixLQUFLLENBQUNXLFFBQU4sQ0FBZUUsYUFBZixFQUE4QixHQUE5QixDQUFQOztBQUNGLFNBQUssT0FBTDtBQUNFLGFBQVEsSUFBR1AsVUFBVSxDQUFDVSxPQUFYLENBQW1CLFVBQW5CLEVBQStCLEVBQS9CLENBQW1DLEdBQTlDOztBQUVGO0FBQ0UsWUFBTSxJQUFJQyxLQUFKLENBQVcsWUFBV1osT0FBUSxvQkFBOUIsQ0FBTjtBQTVCSjtBQThCRDs7QUFDRGEsTUFBTSxDQUFDQyxPQUFQLENBQWVmLGVBQWYsR0FBaUNBLGVBQWpDO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxTQUFTZ0Isa0JBQVQsQ0FBNEJkLFVBQTVCLEVBQXdDO0FBQ3RDLFNBQU8sK0NBQStDZSxJQUEvQyxDQUFvRGYsVUFBcEQsQ0FBUDtBQUNEOztBQUNEWSxNQUFNLENBQUNDLE9BQVAsQ0FBZUMsa0JBQWYsR0FBb0NBLGtCQUFwQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUXVvdGUgaGVscGVycyBpbXBsZW1lbnQgcXVvdGUgYWJpbGl0eSBmb3IgYWxsIGRpYWxlY3RzLlxuICogVGhlc2UgYXJlIGJhc2ljIGJsb2NrIG9mIHF1ZXJ5IGJ1aWxkaW5nXG4gKlxuICogSXRzIGJldHRlciB0byBpbXBsZW1lbnQgYWxsIGRpYWxlY3QgaW1wbGVtZW50YXRpb24gdG9nZXRoZXIgaGVyZS4gV2hpY2ggd2lsbCBhbGxvd1xuICogZXZlbiBhYnN0cmFjdCBnZW5lcmF0b3IgdG8gdXNlIHRoZW0gYnkganVzdCBzcGVjaWZ5aW5nIGRpYWxlY3QgdHlwZS5cbiAqXG4gKiBEZWZpbmluZyB0aGVzZSBoZWxwZXJzIGluIGVhY2ggcXVlcnkgZGlhbGVjdCB3aWxsIGxlYXZlXG4gKiBjb2RlIGluIGR1YWwgZGVwZW5kZW5jeSBvZiBhYnN0cmFjdCA8LT4gc3BlY2lmaWMgZGlhbGVjdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgVXRpbHMgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi91dGlscycpO1xuXG4vKipcbiAqIGxpc3Qgb2YgcmVzZXJ2ZWQgd29yZHMgaW4gUG9zdGdyZVNRTCAxMFxuICogc291cmNlOiBodHRwczovL3d3dy5wb3N0Z3Jlc3FsLm9yZy9kb2NzLzEwL3N0YXRpYy9zcWwta2V5d29yZHMtYXBwZW5kaXguaHRtbFxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IHBvc3RncmVzUmVzZXJ2ZWRXb3JkcyA9ICdhbGwsYW5hbHlzZSxhbmFseXplLGFuZCxhbnksYXJyYXksYXMsYXNjLGFzeW1tZXRyaWMsYXV0aG9yaXphdGlvbixiaW5hcnksYm90aCxjYXNlLGNhc3QsY2hlY2ssY29sbGF0ZSxjb2xsYXRpb24sY29sdW1uLGNvbmN1cnJlbnRseSxjb25zdHJhaW50LGNyZWF0ZSxjcm9zcyxjdXJyZW50X2NhdGFsb2csY3VycmVudF9kYXRlLGN1cnJlbnRfcm9sZSxjdXJyZW50X3NjaGVtYSxjdXJyZW50X3RpbWUsY3VycmVudF90aW1lc3RhbXAsY3VycmVudF91c2VyLGRlZmF1bHQsZGVmZXJyYWJsZSxkZXNjLGRpc3RpbmN0LGRvLGVsc2UsZW5kLGV4Y2VwdCxmYWxzZSxmZXRjaCxmb3IsZm9yZWlnbixmcmVlemUsZnJvbSxmdWxsLGdyYW50LGdyb3VwLGhhdmluZyxpbGlrZSxpbixpbml0aWFsbHksaW5uZXIsaW50ZXJzZWN0LGludG8saXMsaXNudWxsLGpvaW4sbGF0ZXJhbCxsZWFkaW5nLGxlZnQsbGlrZSxsaW1pdCxsb2NhbHRpbWUsbG9jYWx0aW1lc3RhbXAsbmF0dXJhbCxub3Qsbm90bnVsbCxudWxsLG9mZnNldCxvbixvbmx5LG9yLG9yZGVyLG91dGVyLG92ZXJsYXBzLHBsYWNpbmcscHJpbWFyeSxyZWZlcmVuY2VzLHJldHVybmluZyxyaWdodCxzZWxlY3Qsc2Vzc2lvbl91c2VyLHNpbWlsYXIsc29tZSxzeW1tZXRyaWMsdGFibGUsdGFibGVzYW1wbGUsdGhlbix0byx0cmFpbGluZyx0cnVlLHVuaW9uLHVuaXF1ZSx1c2VyLHVzaW5nLHZhcmlhZGljLHZlcmJvc2Usd2hlbix3aGVyZSx3aW5kb3csd2l0aCcuc3BsaXQoJywnKTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9ICBkaWFsZWN0ICAgICAgICAgRGlhbGVjdCBuYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gIGlkZW50aWZpZXIgICAgICBJZGVudGlmaWVyIHRvIHF1b3RlXG4gKiBAcGFyYW0ge09iamVjdH0gIFtvcHRpb25zXVxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5mb3JjZT1mYWxzZV1cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucXVvdGVJZGVudGlmaWVycz10cnVlXVxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBxdW90ZUlkZW50aWZpZXIoZGlhbGVjdCwgaWRlbnRpZmllciwgb3B0aW9ucykge1xuICBpZiAoaWRlbnRpZmllciA9PT0gJyonKSByZXR1cm4gaWRlbnRpZmllcjtcblxuICBvcHRpb25zID0gVXRpbHMuZGVmYXVsdHMob3B0aW9ucyB8fCB7fSwge1xuICAgIGZvcmNlOiBmYWxzZSxcbiAgICBxdW90ZUlkZW50aWZpZXJzOiB0cnVlXG4gIH0pO1xuXG4gIHN3aXRjaCAoZGlhbGVjdCkge1xuICAgIGNhc2UgJ3NxbGl0ZSc6XG4gICAgY2FzZSAnbWFyaWFkYic6XG4gICAgY2FzZSAnbXlzcWwnOlxuICAgICAgcmV0dXJuIFV0aWxzLmFkZFRpY2tzKFV0aWxzLnJlbW92ZVRpY2tzKGlkZW50aWZpZXIsICdgJyksICdgJyk7XG5cbiAgICBjYXNlICdwb3N0Z3Jlcyc6XG4gICAgICBjb25zdCByYXdJZGVudGlmaWVyID0gVXRpbHMucmVtb3ZlVGlja3MoaWRlbnRpZmllciwgJ1wiJyk7XG5cbiAgICAgIGlmIChcbiAgICAgICAgb3B0aW9ucy5mb3JjZSAhPT0gdHJ1ZSAmJlxuICAgICAgICBvcHRpb25zLnF1b3RlSWRlbnRpZmllcnMgPT09IGZhbHNlICYmXG4gICAgICAgICFpZGVudGlmaWVyLmluY2x1ZGVzKCcuJykgJiZcbiAgICAgICAgIWlkZW50aWZpZXIuaW5jbHVkZXMoJy0+JykgJiZcbiAgICAgICAgIXBvc3RncmVzUmVzZXJ2ZWRXb3Jkcy5pbmNsdWRlcyhyYXdJZGVudGlmaWVyLnRvTG93ZXJDYXNlKCkpXG4gICAgICApIHtcbiAgICAgICAgLy8gSW4gUG9zdGdyZXMsIGlmIHRhYmxlcyBvciBhdHRyaWJ1dGVzIGFyZSBjcmVhdGVkIGRvdWJsZS1xdW90ZWQsXG4gICAgICAgIC8vIHRoZXkgYXJlIGFsc28gY2FzZSBzZW5zaXRpdmUuIElmIHRoZXkgY29udGFpbiBhbnkgdXBwZXJjYXNlXG4gICAgICAgIC8vIGNoYXJhY3RlcnMsIHRoZXkgbXVzdCBhbHdheXMgYmUgZG91YmxlLXF1b3RlZC4gVGhpcyBtYWtlcyBpdFxuICAgICAgICAvLyBpbXBvc3NpYmxlIHRvIHdyaXRlIHF1ZXJpZXMgaW4gcG9ydGFibGUgU1FMIGlmIHRhYmxlcyBhcmUgY3JlYXRlZCBpblxuICAgICAgICAvLyB0aGlzIHdheS4gSGVuY2UsIHdlIHN0cmlwIHF1b3RlcyBpZiB3ZSBkb24ndCB3YW50IGNhc2Ugc2Vuc2l0aXZpdHkuXG4gICAgICAgIHJldHVybiByYXdJZGVudGlmaWVyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFV0aWxzLmFkZFRpY2tzKHJhd0lkZW50aWZpZXIsICdcIicpO1xuICAgIGNhc2UgJ21zc3FsJzpcbiAgICAgIHJldHVybiBgWyR7aWRlbnRpZmllci5yZXBsYWNlKC9bW1xcXSddKy9nLCAnJyl9XWA7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBEaWFsZWN0IFwiJHtkaWFsZWN0fVwiIGlzIG5vdCBzdXBwb3J0ZWRgKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMucXVvdGVJZGVudGlmaWVyID0gcXVvdGVJZGVudGlmaWVyO1xuXG4vKipcbiAqIFRlc3QgaWYgYSBnaXZlIHN0cmluZyBpcyBhbHJlYWR5IHF1b3RlZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZGVudGlmaWVyXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBpc0lkZW50aWZpZXJRdW90ZWQoaWRlbnRpZmllcikge1xuICByZXR1cm4gL15cXHMqKD86KFtgXCInXSkoPzooPyFcXDEpLnxcXDF7Mn0pKlxcMVxcLj8pK1xccyokL2kudGVzdChpZGVudGlmaWVyKTtcbn1cbm1vZHVsZS5leHBvcnRzLmlzSWRlbnRpZmllclF1b3RlZCA9IGlzSWRlbnRpZmllclF1b3RlZDtcbiJdfQ==