'use strict';

const _ = require('lodash');

const Op = require('../../../operators');

const Utils = require('../../../utils');

const OperatorHelpers = {
  OperatorMap: {
    [Op.eq]: '=',
    [Op.ne]: '!=',
    [Op.gte]: '>=',
    [Op.gt]: '>',
    [Op.lte]: '<=',
    [Op.lt]: '<',
    [Op.not]: 'IS NOT',
    [Op.is]: 'IS',
    [Op.in]: 'IN',
    [Op.notIn]: 'NOT IN',
    [Op.like]: 'LIKE',
    [Op.notLike]: 'NOT LIKE',
    [Op.iLike]: 'ILIKE',
    [Op.notILike]: 'NOT ILIKE',
    [Op.startsWith]: 'LIKE',
    [Op.endsWith]: 'LIKE',
    [Op.substring]: 'LIKE',
    [Op.regexp]: '~',
    [Op.notRegexp]: '!~',
    [Op.iRegexp]: '~*',
    [Op.notIRegexp]: '!~*',
    [Op.between]: 'BETWEEN',
    [Op.notBetween]: 'NOT BETWEEN',
    [Op.overlap]: '&&',
    [Op.contains]: '@>',
    [Op.contained]: '<@',
    [Op.adjacent]: '-|-',
    [Op.strictLeft]: '<<',
    [Op.strictRight]: '>>',
    [Op.noExtendRight]: '&<',
    [Op.noExtendLeft]: '&>',
    [Op.any]: 'ANY',
    [Op.all]: 'ALL',
    [Op.and]: ' AND ',
    [Op.or]: ' OR ',
    [Op.col]: 'COL',
    [Op.placeholder]: '$$PLACEHOLDER$$'
  },
  OperatorsAliasMap: {},

  setOperatorsAliases(aliases) {
    if (!aliases || _.isEmpty(aliases)) {
      this.OperatorsAliasMap = false;
    } else {
      this.OperatorsAliasMap = Object.assign({}, aliases);
    }
  },

  _replaceAliases(orig) {
    const obj = {};

    if (!this.OperatorsAliasMap) {
      return orig;
    }

    Utils.getOperators(orig).forEach(op => {
      const item = orig[op];

      if (_.isPlainObject(item)) {
        obj[op] = this._replaceAliases(item);
      } else {
        obj[op] = item;
      }
    });

    _.forOwn(orig, (item, prop) => {
      prop = this.OperatorsAliasMap[prop] || prop;

      if (_.isPlainObject(item)) {
        item = this._replaceAliases(item);
      }

      obj[prop] = item;
    });

    return obj;
  }

};
module.exports = OperatorHelpers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9kaWFsZWN0cy9hYnN0cmFjdC9xdWVyeS1nZW5lcmF0b3Ivb3BlcmF0b3JzLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiT3AiLCJVdGlscyIsIk9wZXJhdG9ySGVscGVycyIsIk9wZXJhdG9yTWFwIiwiZXEiLCJuZSIsImd0ZSIsImd0IiwibHRlIiwibHQiLCJub3QiLCJpcyIsImluIiwibm90SW4iLCJsaWtlIiwibm90TGlrZSIsImlMaWtlIiwibm90SUxpa2UiLCJzdGFydHNXaXRoIiwiZW5kc1dpdGgiLCJzdWJzdHJpbmciLCJyZWdleHAiLCJub3RSZWdleHAiLCJpUmVnZXhwIiwibm90SVJlZ2V4cCIsImJldHdlZW4iLCJub3RCZXR3ZWVuIiwib3ZlcmxhcCIsImNvbnRhaW5zIiwiY29udGFpbmVkIiwiYWRqYWNlbnQiLCJzdHJpY3RMZWZ0Iiwic3RyaWN0UmlnaHQiLCJub0V4dGVuZFJpZ2h0Iiwibm9FeHRlbmRMZWZ0IiwiYW55IiwiYWxsIiwiYW5kIiwib3IiLCJjb2wiLCJwbGFjZWhvbGRlciIsIk9wZXJhdG9yc0FsaWFzTWFwIiwic2V0T3BlcmF0b3JzQWxpYXNlcyIsImFsaWFzZXMiLCJpc0VtcHR5IiwiT2JqZWN0IiwiYXNzaWduIiwiX3JlcGxhY2VBbGlhc2VzIiwib3JpZyIsIm9iaiIsImdldE9wZXJhdG9ycyIsImZvckVhY2giLCJvcCIsIml0ZW0iLCJpc1BsYWluT2JqZWN0IiwiZm9yT3duIiwicHJvcCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE1BQU1BLENBQUMsR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBakI7O0FBQ0EsTUFBTUMsRUFBRSxHQUFHRCxPQUFPLENBQUMsb0JBQUQsQ0FBbEI7O0FBQ0EsTUFBTUUsS0FBSyxHQUFHRixPQUFPLENBQUMsZ0JBQUQsQ0FBckI7O0FBRUEsTUFBTUcsZUFBZSxHQUFHO0FBQ3RCQyxFQUFBQSxXQUFXLEVBQUU7QUFDWCxL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RUFBWjs7QUFDQSxRQUFJLENBQUMsS0FBS1IsaUJBQVYsRUFBNkI7QUFDM0IsYUFBT08sSUFBUDtBQUNEOztBQUVEL0MsSUFBQUEsS0FBSyxDQUFDaUQsWUFBTixDQUFtQkYsSUFBbkIsRUFBeUJHLE9BQXpCLENBQWlDQyxFQUFFLElBQUk7QUFDckMsWUFBTUMsSUFBSSxHQUFHTCxJQUFJLENBQUNJLEVBQUQsQ0FBakI7O0FBQ0EsVUFBSXRELENBQUMsQ0FBQ3dELGFBQUYsQ0FBZ0JELElBQWhCLENBQUosRUFBMkI7QUFDekJKLFFBQUFBLEdBQUcsQ0FBQ0csRUFBRCxDQUFILEdBQVUsS0FBS0wsZUFBTCxDQUFxQk0sSUFBckIsQ0FBVjtBQUNELE9BRkQsTUFFTztBQUNMSixRQUFBQSxHQUFHLENBQUNHLEVBQUQsQ0FBSCxHQUFVQyxJQUFWO0FBQ0Q7QUFDRixLQVBEOztBQVNBdkQsSUFBQUEsQ0FBQyxDQUFDeUQsTUFBRixDQUFTUCxJQUFULEVBQWUsQ0FBQ0ssSUFBRCxFQUFPRyxJQUFQLEtBQWdCO0FBQzdCQSxNQUFBQSxJQUFJLEdBQUcsS0FBS2YsaUJBQUwsQ0FBdUJlLElBQXZCLEtBQWdDQSxJQUF2Qzs7QUFDQSxVQUFJMUQsQ0FBQyxDQUFDd0QsYUFBRixDQUFnQkQsSUFBaEIsQ0FBSixFQUEyQjtBQUN6QkEsUUFBQUEsSUFBSSxHQUFHLEtBQUtOLGVBQUwsQ0FBcUJNLElBQXJCLENBQVA7QUFDRDs7QUFDREosTUFBQUEsR0FBRyxDQUFDTyxJQUFELENBQUgsR0FBWUgsSUFBWjtBQUNELEtBTkQ7O0FBT0EsV0FBT0osR0FBUDtBQUNEOztBQTFFcUIsQ0FBeEI7QUE2RUFRLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnhELGVBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5jb25zdCBPcCA9IHJlcXVpcmUoJy4uLy4uLy4uL29wZXJhdG9ycycpO1xuY29uc3QgVXRpbHMgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlscycpO1xuXG5jb25zdCBPcGVyYXRvckhlbHBlcnMgPSB7XG4gIE9wZXJhdG9yTWFwOiB7XG4gICAgW09wLmVxXTogJz0nLFxuICAgIFtPcC5uZV06ICchPScsXG4gICAgW09wLmd0ZV06ICc+PScsXG4gICAgW09wLmd0XTogJz4nLFxuICAgIFtPcC5sdGVdOiAnPD0nLFxuICAgIFtPcC5sdF06ICc8JyxcbiAgICBbT3Aubm90XTogJ0lTIE5PVCcsXG4gICAgW09wLmlzXTogJ0lTJyxcbiAgICBbT3AuaW5dOiAnSU4nLFxuICAgIFtPcC5ub3RJbl06ICdOT1QgSU4nLFxuICAgIFtPcC5saWtlXTogJ0xJS0UnLFxuICAgIFtPcC5ub3RMaWtlXTogJ05PVCBMSUtFJyxcbiAgICBbT3AuaUxpa2VdOiAnSUxJS0UnLFxuICAgIFtPcC5ub3RJTGlrZV06ICdOT1QgSUxJS0UnLFxuICAgIFtPcC5zdGFydHNXaXRoXTogJ0xJS0UnLFxuICAgIFtPcC5lbmRzV2l0aF06ICdMSUtFJyxcbiAgICBbT3Auc3Vic3RyaW5nXTogJ0xJS0UnLFxuICAgIFtPcC5yZWdleHBdOiAnficsXG4gICAgW09wLm5vdFJlZ2V4cF06ICchficsXG4gICAgW09wLmlSZWdleHBdOiAnfionLFxuICAgIFtPcC5ub3RJUmVnZXhwXTogJyF+KicsXG4gICAgW09wLmJldHdlZW5dOiAnQkVUV0VFTicsXG4gICAgW09wLm5vdEJldHdlZW5dOiAnTk9UIEJFVFdFRU4nLFxuICAgIFtPcC5vdmVybGFwXTogJyYmJyxcbiAgICBbT3AuY29udGFpbnNdOiAnQD4nLFxuICAgIFtPcC5jb250YWluZWRdOiAnPEAnLFxuICAgIFtPcC5hZGphY2VudF06ICctfC0nLFxuICAgIFtPcC5zdHJpY3RMZWZ0XTogJzw8JyxcbiAgICBbT3Auc3RyaWN0UmlnaHRdOiAnPj4nLFxuICAgIFtPcC5ub0V4dGVuZFJpZ2h0XTogJyY8JyxcbiAgICBbT3Aubm9FeHRlbmRMZWZ0XTogJyY+JyxcbiAgICBbT3AuYW55XTogJ0FOWScsXG4gICAgW09wLmFsbF06ICdBTEwnLFxuICAgIFtPcC5hbmRdOiAnIEFORCAnLFxuICAgIFtPcC5vcl06ICcgT1IgJyxcbiAgICBbT3AuY29sXTogJ0NPTCcsXG4gICAgW09wLnBsYWNlaG9sZGVyXTogJyQkUExBQ0VIT0xERVIkJCdcbiAgfSxcblxuICBPcGVyYXRvcnNBbGlhc01hcDoge30sXG5cbiAgc2V0T3BlcmF0b3JzQWxpYXNlcyhhbGlhc2VzKSB7XG4gICAgaWYgKCFhbGlhc2VzIHx8IF8uaXNFbXB0eShhbGlhc2VzKSkge1xuICAgICAgdGhpcy5PcGVyYXRvcnNBbGlhc01hcCA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLk9wZXJhdG9yc0FsaWFzTWFwID0gT2JqZWN0LmFzc2lnbih7fSwgYWxpYXNlcyk7XG4gICAgfVxuICB9LFxuXG4gIF9yZXBsYWNlQWxpYXNlcyhvcmlnKSB7XG4gICAgY29uc3Qgb2JqID0ge307XG4gICAgaWYgKCF0aGlzLk9wZXJhdG9yc0FsaWFzTWFwKSB7XG4gICAgICByZXR1cm4gb3JpZztcbiAgICB9XG5cbiAgICBVdGlscy5nZXRPcGVyYXRvcnMob3JpZykuZm9yRWFjaChvcCA9PiB7XG4gICAgICBjb25zdCBpdGVtID0gb3JpZ1tvcF07XG4gICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KGl0ZW0pKSB7XG4gICAgICAgIG9ialtvcF0gPSB0aGlzLl9yZXBsYWNlQWxpYXNlcyhpdGVtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9ialtvcF0gPSBpdGVtO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgXy5mb3JPd24ob3JpZywgKGl0ZW0sIHByb3ApID0+IHtcbiAgICAgIHByb3AgPSB0aGlzLk9wZXJhdG9yc0FsaWFzTWFwW3Byb3BdIHx8IHByb3A7XG4gICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KGl0ZW0pKSB7XG4gICAgICAgIGl0ZW0gPSB0aGlzLl9yZXBsYWNlQWxpYXNlcyhpdGVtKTtcbiAgICAgIH1cbiAgICAgIG9ialtwcm9wXSA9IGl0ZW07XG4gICAgfSk7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPcGVyYXRvckhlbHBlcnM7XG4iXX0=