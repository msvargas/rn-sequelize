'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

let AbstractDialect = function AbstractDialect() {
  _classCallCheck(this, AbstractDialect);
};

AbstractDialect.prototype.supports = {
  'DEFAULT': true,
  'DEFAULT VALUES': false,
  'VALUES ()': false,
  'LIMIT ON UPDATE': false,
  'ON DUPLICATE KEY': true,
  'ORDER NULLS': false,
  'UNION': true,
  'UNION ALL': true,
  'RIGHT JOIN': true,

  /* does the dialect support returning values for inserted/updated fields */
  returnValues: false,

  /* features specific to autoIncrement values */
  autoIncrement: {
    /* does the dialect require modification of insert queries when inserting auto increment fields */
    identityInsert: false,

    /* does the dialect support inserting default/null values for autoincrement fields */
    defaultValue: true,

    /* does the dialect support updating autoincrement fields */
    update: true
  },

  /* Do we need to say DEFAULT for bulk insert */
  bulkDefault: false,
  schemas: false,
  transactions: true,
  settingIsolationLevelDuringTransaction: true,
  transactionOptions: {
    type: false
  },
  migrations: true,
  upserts: true,
  inserts: {
    ignoreDuplicates: '',

    /* dialect specific words for INSERT IGNORE or DO NOTHING */
    updateOnDuplicate: false,

    /* whether dialect supports ON DUPLICATE KEY UPDATE */
    onConflictDoNothing: ''
    /* dialect specific words for ON CONFLICT DO NOTHING */

  },
  constraints: {
    restrict: true,
    addConstraint: true,
    dropConstraint: true,
    unique: true,
    default: false,
    check: true,
    foreignKey: true,
    primaryKey: true
  },
  index: {
    collate: true,
    length: false,
    parser: false,
    concurrently: false,
    type: false,
    using: true,
    functionBased: false
  },
  joinTableDependent: true,
  groupedLimit: true,
  indexViaAlter: false,
  JSON: false,
  deferrableConstraints: false
};
module.exports = AbstractDialect;
module.exports.AbstractDialect = AbstractDialect;
module.exports.default = AbstractDialect;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9kaWFsZWN0cy9hYnN0cmFjdC9pbmRleC5qcyJdLCJuYW1lcyI6WyJBYnN0cmFjdERpYWxlY3QiLCJwcm90b3R5cGUiLCJzdXBwb3J0cyIsInJldHVyblZhbHVlcyIsImF1dG9JbmNyZW1lbnQiLCJpZGVudGl0eUluc2VydCIsImRlZmF1bHRWYWx1ZSIsInVwZGF0ZSIsImJ1bGtEZWZhdWx0Iiwic2NoZW1hcyIsInRyYW5zYWN0aW9ucyIsInNldHRpbmdJc29sYXRpb25MZXZlbER1cmluZ1RyYW5zYWN0aW9uIiwidHJhbnNhY3Rpb25PcHRpb25zIiwidHlwZSIsIm1pZ3JhdGlvbnMiLCJ1cHNlcnRzIiwiaW5zZXJ0cyIsImlnbm9yZUR1cGxpY2F0ZXMiLCJ1cGRhdGVPbkR1cGxpY2F0ZSIsIm9uQ29uZmxpY3REb05vdGhpbmciLCJjb25zdHJhaW50cyIsInJlc3RyaWN0IiwiYWRkQ29uc3RyYWludCIsImRyb3BDb25zdHJhaW50IiwidW5pcXVlIiwiZGVmYXVsdCIsImNoZWNrIiwiZm9yZWlnbktleSIsInByaW1hcnlLZXkiLCJpbmRleCIsImNvbGxhdGUiLCJsZW5ndGgiLCJwYXJzZXIiLCJjb25jdXJyZW50bHkiLCJ1c2luZyIsImZ1bmN0aW9uQmFzZWQiLCJqb2luVGFibGVEZXBlbmRlbnQiLCJncm91cGVkTGltaXQiLCJpbmRleFZpYUFsdGVyIiwiSlNPTiIsImRlZmVycmFibGVDb25zdHJhaW50cyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0lBRU1BLGU7Ozs7QUFFTkEsZUFBZSxDQUFDQyxTQUFoQixDQUEwQkMsUUFBMUIsR0FBcUM7QUFDbkMsYUFBVyxJQUR3QjtBQUVuQyxvQkFBa0IsS0FGaUI7QUFHbkMsZUFBYSxLQUhzQjtBQUluQyxxQkFBbUIsS0FKZ0I7QUFLbkMsc0JBQW9CLElBTGU7QUFNbkMsaUJBQWUsS0FOb0I7QUFPbkMsV0FBUyxJQVAwQjtBQVFuQyxlQUFhLElBUnNCO0FBU25DLGdCQUFjLElBVHFCOztBQVduQztBQUNBQyxFQUFBQSxZQUFZLEVBQUUsS0FacUI7O0FBY25DO0FBQ0FDLEVBQUFBLGFBQWEsRUFBRTtBQUNiO0FBQ0FDLElBQUFBLGNBQWMsRUFBRSxLQUZIOztBQUliO0FBQ0FDLElBQUFBLFlBQVksRUFBRSxJQUxEOztBQU9iO0FBQ0FDLElBQUFBLE1BQU0sRUFBRTtBQVJLLEdBZm9COztBQXlCbkM7QUFDQUMsRUFBQUEsV0FBVyxFQUFFLEtBMUJzQjtBQTJCbkNDLEVBQUFBLE9BQU8sRUFBRSxLQTNCMEI7QUE0Qm5DQyxFQUFBQSxZQUFZLEVBQUUsSUE1QnFCO0FBNkJuQ0MsRUFBQUEsc0NBQXNDLEVBQUUsSUE3Qkw7QUE4Qm5DQyxFQUFBQSxrQkFBa0IsRUFBRTtBQUNsQkMsSUFBQUEsSUFBSSxFQUFFO0FBRFksR0E5QmU7QUFpQ25DQyxFQUFBQSxVQUFVLEVBQUUsSUFqQ3VCO0FBa0NuQ0MsRUFBQUEsT0FBTyxFQUFFLElBbEMwQjtBQW1DbkNDLEVBQUFBLE9BQU8sRUFBRTtBQUNQQyxJQUFBQSxnQkFBZ0IsRUFBRSxFQURYOztBQUNlO0FBQ3RCQyxJQUFBQSxpQkFBaUIsRUFBRSxLQUZaOztBQUVtQjtBQUMxQkMsSUFBQUEsbUJBQW1CLEVBQUU7QUFBRzs7QUFIakIsR0FuQzBCO0FBd0NuQ0MsRUFBQUEsV0FBVyxFQUFFO0FBQ1hDLElBQUFBLFFBQVEsRUFBRSxJQURDO0FBRVhDLElBQUFBLGFBQWEsRUFBRSxJQUZKO0FBR1hDLElBQUFBLGNBQWMsRUFBRSxJQUhMO0FBSVhDLElBQUFBLE1BQU0sRUFBRSxJQUpHO0FBS1hDLElBQUFBLE9BQU8sRUFBRSxLQUxFO0FBTVhDLElBQUFBLEtBQUssRUFBRSxJQU5JO0FBT1hDLElBQUFBLFVBQVUsRUFBRSxJQVBEO0FBUVhDLElBQUFBLFVBQVUsRUFBRTtBQVJELEdBeENzQjtBQWtEbkNDLEVBQUFBLEtBQUssRUFBRTtBQUNMQyxJQUFBQSxPQUFPLEVBQUUsSUFESjtBQUVMQyxJQUFBQSxNQUFNLEVBQUUsS0FGSDtBQUdMQyxJQUFBQSxNQUFNLEVBQUUsS0FISDtBQUlMQyxJQUFBQSxZQUFZLEVBQUUsS0FKVDtBQUtMcEIsSUFBQUEsSUFBSSxFQUFFLEtBTEQ7QUFNTHFCLElBQUFBLEtBQUssRUFBRSxJQU5GO0FBT0xDLElBQUFBLGFBQWEsRUFBRTtBQVBWLEdBbEQ0QjtBQTJEbkNDLEVBQUFBLGtCQUFrQixFQUFFLElBM0RlO0FBNERuQ0MsRUFBQUEsWUFBWSxFQUFFLElBNURxQjtBQTZEbkNDLEVBQUFBLGFBQWEsRUFBRSxLQTdEb0I7QUE4RG5DQyxFQUFBQSxJQUFJLEVBQUUsS0E5RDZCO0FBK0RuQ0MsRUFBQUEscUJBQXFCLEVBQUU7QUEvRFksQ0FBckM7QUFrRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjFDLGVBQWpCO0FBQ0F5QyxNQUFNLENBQUNDLE9BQVAsQ0FBZTFDLGVBQWYsR0FBaUNBLGVBQWpDO0FBQ0F5QyxNQUFNLENBQUNDLE9BQVAsQ0FBZWpCLE9BQWYsR0FBeUJ6QixlQUF6QiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY2xhc3MgQWJzdHJhY3REaWFsZWN0IHt9XG5cbkFic3RyYWN0RGlhbGVjdC5wcm90b3R5cGUuc3VwcG9ydHMgPSB7XG4gICdERUZBVUxUJzogdHJ1ZSxcbiAgJ0RFRkFVTFQgVkFMVUVTJzogZmFsc2UsXG4gICdWQUxVRVMgKCknOiBmYWxzZSxcbiAgJ0xJTUlUIE9OIFVQREFURSc6IGZhbHNlLFxuICAnT04gRFVQTElDQVRFIEtFWSc6IHRydWUsXG4gICdPUkRFUiBOVUxMUyc6IGZhbHNlLFxuICAnVU5JT04nOiB0cnVlLFxuICAnVU5JT04gQUxMJzogdHJ1ZSxcbiAgJ1JJR0hUIEpPSU4nOiB0cnVlLFxuXG4gIC8qIGRvZXMgdGhlIGRpYWxlY3Qgc3VwcG9ydCByZXR1cm5pbmcgdmFsdWVzIGZvciBpbnNlcnRlZC91cGRhdGVkIGZpZWxkcyAqL1xuICByZXR1cm5WYWx1ZXM6IGZhbHNlLFxuXG4gIC8qIGZlYXR1cmVzIHNwZWNpZmljIHRvIGF1dG9JbmNyZW1lbnQgdmFsdWVzICovXG4gIGF1dG9JbmNyZW1lbnQ6IHtcbiAgICAvKiBkb2VzIHRoZSBkaWFsZWN0IHJlcXVpcmUgbW9kaWZpY2F0aW9uIG9mIGluc2VydCBxdWVyaWVzIHdoZW4gaW5zZXJ0aW5nIGF1dG8gaW5jcmVtZW50IGZpZWxkcyAqL1xuICAgIGlkZW50aXR5SW5zZXJ0OiBmYWxzZSxcblxuICAgIC8qIGRvZXMgdGhlIGRpYWxlY3Qgc3VwcG9ydCBpbnNlcnRpbmcgZGVmYXVsdC9udWxsIHZhbHVlcyBmb3IgYXV0b2luY3JlbWVudCBmaWVsZHMgKi9cbiAgICBkZWZhdWx0VmFsdWU6IHRydWUsXG5cbiAgICAvKiBkb2VzIHRoZSBkaWFsZWN0IHN1cHBvcnQgdXBkYXRpbmcgYXV0b2luY3JlbWVudCBmaWVsZHMgKi9cbiAgICB1cGRhdGU6IHRydWVcbiAgfSxcbiAgLyogRG8gd2UgbmVlZCB0byBzYXkgREVGQVVMVCBmb3IgYnVsayBpbnNlcnQgKi9cbiAgYnVsa0RlZmF1bHQ6IGZhbHNlLFxuICBzY2hlbWFzOiBmYWxzZSxcbiAgdHJhbnNhY3Rpb25zOiB0cnVlLFxuICBzZXR0aW5nSXNvbGF0aW9uTGV2ZWxEdXJpbmdUcmFuc2FjdGlvbjogdHJ1ZSxcbiAgdHJhbnNhY3Rpb25PcHRpb25zOiB7XG4gICAgdHlwZTogZmFsc2VcbiAgfSxcbiAgbWlncmF0aW9uczogdHJ1ZSxcbiAgdXBzZXJ0czogdHJ1ZSxcbiAgaW5zZXJ0czoge1xuICAgIGlnbm9yZUR1cGxpY2F0ZXM6ICcnLCAvKiBkaWFsZWN0IHNwZWNpZmljIHdvcmRzIGZvciBJTlNFUlQgSUdOT1JFIG9yIERPIE5PVEhJTkcgKi9cbiAgICB1cGRhdGVPbkR1cGxpY2F0ZTogZmFsc2UsIC8qIHdoZXRoZXIgZGlhbGVjdCBzdXBwb3J0cyBPTiBEVVBMSUNBVEUgS0VZIFVQREFURSAqL1xuICAgIG9uQ29uZmxpY3REb05vdGhpbmc6ICcnIC8qIGRpYWxlY3Qgc3BlY2lmaWMgd29yZHMgZm9yIE9OIENPTkZMSUNUIERPIE5PVEhJTkcgKi9cbiAgfSxcbiAgY29uc3RyYWludHM6IHtcbiAgICByZXN0cmljdDogdHJ1ZSxcbiAgICBhZGRDb25zdHJhaW50OiB0cnVlLFxuICAgIGRyb3BDb25zdHJhaW50OiB0cnVlLFxuICAgIHVuaXF1ZTogdHJ1ZSxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICBjaGVjazogdHJ1ZSxcbiAgICBmb3JlaWduS2V5OiB0cnVlLFxuICAgIHByaW1hcnlLZXk6IHRydWVcbiAgfSxcbiAgaW5kZXg6IHtcbiAgICBjb2xsYXRlOiB0cnVlLFxuICAgIGxlbmd0aDogZmFsc2UsXG4gICAgcGFyc2VyOiBmYWxzZSxcbiAgICBjb25jdXJyZW50bHk6IGZhbHNlLFxuICAgIHR5cGU6IGZhbHNlLFxuICAgIHVzaW5nOiB0cnVlLFxuICAgIGZ1bmN0aW9uQmFzZWQ6IGZhbHNlXG4gIH0sXG4gIGpvaW5UYWJsZURlcGVuZGVudDogdHJ1ZSxcbiAgZ3JvdXBlZExpbWl0OiB0cnVlLFxuICBpbmRleFZpYUFsdGVyOiBmYWxzZSxcbiAgSlNPTjogZmFsc2UsXG4gIGRlZmVycmFibGVDb25zdHJhaW50czogZmFsc2Vcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQWJzdHJhY3REaWFsZWN0O1xubW9kdWxlLmV4cG9ydHMuQWJzdHJhY3REaWFsZWN0ID0gQWJzdHJhY3REaWFsZWN0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IEFic3RyYWN0RGlhbGVjdDtcbiJdfQ==